import Head from "next/head";
import Header from "components/Header";
import Tree from "components/Tree";
import Content from "components/Content";
import Info from "components/Info";
import { list } from "api";
import { GetServerSidePropsContext } from "next";
import { useEffect } from "react";
import { useAppDispatch, useAppSelector } from "app/hooks";
import { setDirectories, setInfo, setFiles, setLoading, setPathname, setSuccess, selectIsLoading, setFileInfo } from "app/appSlice";
import { ResponseFailure, ResponseSuccess } from "api/Response";

type AppProps = {
	pathname: string;
	response: ResponseSuccess | ResponseFailure;
};

const App = ({ pathname, response: res }: AppProps) => {
	const dispatch = useAppDispatch();
	const loading = useAppSelector(selectIsLoading);

	useEffect(() => {
		console.log(res)
		dispatch(setPathname(pathname));
		console.log(res);
		if (res.success) {
			if (res.data.info.isDirectory && res.data.content.type === "directory") {
				dispatch(setDirectories(res.data.content.data.directories));
				dispatch(setFiles(res.data.content.data.files));
			}
			else if(res.data.info.isFile && res.data.content.type !== "directory") {
				dispatch(setFileInfo(res.data.content));
			}
			dispatch(setInfo(res.data.info));
		}
		dispatch(setSuccess(res.success));
		dispatch(setLoading(false));
	}, [pathname, res, dispatch]);

	return (
		<>
			<Head>
				<title>App - {pathname}</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{loading && (
				<div className="fixed w-full h-screen" >
					<progress className="absolute top-0 linear-progress w-full" />
				</div>
			)}
			<Header />
			<main className="max-w-screen-xl mx-auto px-4 sm:px-6 md:px-8 py-2 pb-8 pt-4">
				<Tree />
				<div className="mt-8 grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
					<Content />
					<Info />
				</div>
			</main>
		</>
	);
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const paths = context.query?.all;
	const pathname = Array.isArray(paths) ? "/" + (paths.shift(), paths.join("/")) : paths ?? "/";
	let response;
	try {
		response = await list(pathname);
	} catch (error) {
		response = error;
	}

	return { props: { pathname, response } };
}

export default App;
